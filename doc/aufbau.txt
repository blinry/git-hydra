Problem: Eigentlich möchte man einen Modus haben, in dem alle Objekte des Repositorys angezeigt werden, auch die (durch Tags) unerreichbaren. Dazu müsste es eine Möglichkeit geben, diese Objekte aufzulisten. Bei großen Repositorys wird das dann aber zu langsam. Daher: Zwei Modi. In einem sind nur die Tags Ausgangspunte, in dem anderen alle.

Problem: Die Klassen sind zu groß. Welche kann man aufteilen? Die Factory könnte man zerteilen in "Unter-Factories" pro Typ. 

Ich glaube, eine Datenstruktur für einen Objekttypen wäre sinnvoll. In dem man sämtliche Objekte des Repositorys erreichen kann, die dann eine eindeutige ID der Knoten des Graphen sein können. Soetwas wie (object, "353454aef435") oder (ref, "refs/tags/345345") oder (ref, "refs/branch/435eee345") oder... welche Datentypen hab ich denn noch? Ah: (file, "foo/bar") und (note, "1"). Einfach das struct "type" erweitern?

Objekthierarchie der Knoten?

Knoten (Verbindungsmechanismus)
    Repository Object
        Git-Object
            Blob
            Tree
            Commit
            Node
        Ref
    Tutorial-Objekte
        Notiz
        Marker (wie die Google-Marker)

Alle werden verschieden gezeichnet und im Layouting gibt es auch Unterschiede.

ENTSCHEIDUNG: Datei-Objekte werden nicht gezeichnet, die sieht man ja auch so. Vielleicht später ergänzen.

HINWEIS: ORIG_HEAD beachten!

Ablauf
======

- Pfad des Git-Repositories feststellen (entweder aktuelles oder per Option angegebenes)
- Repository-Objekt erzeugen (Einziges Tor zum Repository)
- Leeren Graph erzeugen
- Leeren Index erzeugen
- initiales Füllen beider (mithilfe des Repos)
- Layouter auf Objektgraph anwenden (im Initial-Modus)
- Display erzeugen
- Layouter erzeugen
- Loop
    - Index updaten (mithilfe Repo)
    - Graph updaten (mithilfe Repo)
    - Graph layouten
    - Graph und Index zeichnen
    - auf Events reagieren

Programm erzeugt Display, Graph und Index
Display braucht Graph + Index
Display-Events verändern Graph
