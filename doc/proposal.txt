Projekt: Git-Tutor
==================

Student: Sebastian Morr (4109354)

Zusammenfassung
---------------

Der Git-Tutor visualisiert den internen Aufbau von Git-Repositories in Echtzeit
und verdeutlicht so die Funktionsweise und die Konzepte des verteilten
Versionskontrollsystems. In einem interaktiven Tutorial-Modus kann der Nutzer
Git von Grund auf lernen.

Motivation
----------

Das verteilte Versionskontrollsystem "Git" ist großartig, aber seine Konzepte
sind anfangs etwas gewöhnungsbedürftig. Insbesondere das Konzept der "Staging
area" findet man so in keinem anderen VCS. Die Lernkurve verläuft anfangs also
recht steil.

Dabei ist Git ist Kern sehr einfach aufgebaut: Es speichert einen gerichteten
azyklischen Graphen, mit vier Typen von Knoten: Blobs (Dateiinhalte), Trees
("Ordner", zeigen auf benannte Blobs und weitere Trees), Commits (zeigen auf
einen bestimmten Tree) und Tags (zeigen auf beliebige Objekte). Mit dieser
Struktur kann man eine komplette Versionsgeschichte aufbauen.

Der Git-Tutor soll diese Inkohärenz zwischen (wunderschön einfachem) Konzept und
(scheinbar komplexer) Bedienung aufheben. Er stellt den DAG grafisch dar, und
zeigt animiert an, was die Befehle im Graphen genau verändern. Damit kann ein
hohes Verständnis für die Funktionsweise von Git erreicht werden.

Oberfläche
----------

Die Oberfläche besteht aus zwei Bestandteilen:

- Die Kommandozeile, auf der man Git-Kommandos eintippen kann. Sie wird
  vermutlich nicht Bestandteil des Tutors sein, sondern in einem zweiten Fenster
  geöffnet werden.
- Der Objekt-Graph, der den aktuellen Zustand des Repositories darstellt, und
  der widerum in drei Abschnitte unterteilt ist: Das Arbeitsverzeichnis, die
  Staging area und die Objekt-Datenbank.

Der Graph stellt die verschiedenen Objekttypen deutlich unterscheidbar dar.
Commits sind horizontal von links nach rechts angeordnet, Tags darüber, Inhalte
darunter. Alle Knoten sind "einklappbar", ihre Kinder werden dann nicht mehr
angezeigt, um mehr Übersicht zu schaffen (und den Layouter zu entlasten).

Benutzung
---------

Es gibt zwei Möglichkeiten, den Git-Tutor zu nutzen:

Im "freien" Modus kann man in einem beliebigen Repository arbeiten und bekommt
einfach visualisiert, was die Befehle, die man eintippt, tatsächlich bewirken.

Im "angeleiteten" Modus gibt's einen vorbereiteten Lehrgang, mit Erklärungen,
wie Git funktioniert und eingestreuten Übungsaufgaben. Der Lehrtext erscheint in
speziellen Blasen an den jeweiligen Stellen im Graphen.

Externe Bibliotheken
--------------------

- libgit2 (http://libgit2.github.com/) zum schnellen Auslesen der
  Git-Repositories.
- SFML (http://sfml-dev.org/) zum Darstellen der Oberfläche und zur Interaktion
  mit dem Benutzer.
- Evt. die Boost Graph Library
  (http://www.boost.org/doc/libs/1_48_0/libs/graph/doc/index.html) für
  Graphenalgorithmen.
- Irgendeine 2D-Physik-Library zum Layouten, vermutlich Box2D.

Tools
-----

- CMake zum Bauen des Projekts
- Doxygen zur Dokumentation
- Git zur Versionskontrolle ;-)
- Vim für alles andere...

Besondere Anforderunen
----------------------

Das Layouten des DAG muss schnell genug geschehen, um eine flüssige Animation zu
erzeugen. Die Versionsgeschichte großer Projekte, etwa des Linux-Kernels (über
30000 Dateien, einige 10000 Commits) , vollständig zu visualisieren, wird
unmöglich sein (das schafft nicht mal der populäre Git-Hosting-Dienst GitHub).
Hier muss eine Möglichkeit gefunden werden, den Graphen an einigen Stellen
"abzukürzen", um trotzdem ein Betrachten großer Repositories zu ermöglichen.

Die Form der Darstellung muss so gewählt werden, dass sie übersichtlich,
möglichst intuitiv versändlich und leicht zu navigieren ist. Insbesondere bei
Änderungen am DAG muss Sorgfalt auf die Animation gelegt werden, damit der
Benutzer versteht, was da gerade genau passiert.
